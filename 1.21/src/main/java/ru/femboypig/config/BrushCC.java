package ru.femboypig.config;

import dev.isxander.yacl3.api.*;
import dev.isxander.yacl3.api.controller.*;
import dev.isxander.yacl3.config.v2.api.ConfigClassHandler;
import dev.isxander.yacl3.config.v2.api.serializer.GsonConfigSerializerBuilder;
import dev.isxander.yacl3.gui.controllers.ColorController;
import net.fabricmc.loader.api.FabricLoader;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.text.Text;

import java.awt.*;
import java.text.DecimalFormat;
import java.util.concurrent.atomic.AtomicReference;

public class BrushCC {
    public static final DecimalFormat FORMAT = new DecimalFormat("#.##");


    public static final ConfigClassHandler<SEConfigs> CONFIG = ConfigClassHandler.createBuilder(SEConfigs.class)
            .serializer(config -> GsonConfigSerializerBuilder.create(config)
                    .setPath(FabricLoader.getInstance().getConfigDir().resolve("brushclient.json"))
                    .build())
            .build();

    @SuppressWarnings("deprecation")
    public static Screen configScreen(Screen parent) {
        AtomicReference<Option<Boolean>> booleanOption = new AtomicReference<>();

        return YetAnotherConfigLib.create(CONFIG, ((defaults, config, builder) -> builder
                .title(Text.translatable("brushclient.title"))

                // RENDER CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.render"))

                        // No Hurt Cam
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.nohurtcam"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.nohurtcam"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.nohurtcam.desc")))
                                        .binding(defaults.hurtCamEnabled, () -> config.hurtCamEnabled, newVal -> config.hurtCamEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Visual Ratio
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.visualratio"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.visualratio"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.visualratio.desc")))
                                        .binding(defaults.visualRatioEnabled, () -> config.visualRatioEnabled, newVal -> config.visualRatioEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.visualratio"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.visualratio.desc")))
                                        .binding(1.78f, () -> config.visualRatio, newVal -> config.visualRatio = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0.5f, 10f)
                                                .step(0.01f))
                                        .build())
                                .build())
                        // Black Pigs
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.blackpig"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.blackpig"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.blackpig.desc")))
                                        .binding(defaults.blackPigEnabled, () -> config.blackPigEnabled, newVal -> config.blackPigEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // FullBright
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.fullbright"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.fullbright"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.fullbright.desc")))
                                        .binding(defaults.fullBrightEnabled, () -> config.fullBrightEnabled, newVal -> config.fullBrightEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // No Armor Render
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.noarmorrender"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.noarmorrender"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.noarmorrender.desc")))
                                        .binding(defaults.NAREnabled, () -> config.NAREnabled, newVal -> config.NAREnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Time Changer
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.timechanger"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.timechanger"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.timechanger.desc")))
                                        .binding(defaults.timeChangerEnabled, () -> config.timeChangerEnabled, newVal -> config.timeChangerEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.render.timechanger"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.timechanger.desc")))
                                        .binding(0, () -> config.timeChanger, newVal -> config.timeChanger = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 18000)
                                                .step(100))
                                        .build())
                                .build())
                        // Render Name
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.rendername"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.rendername"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.rendername.desc")))
                                        .binding(defaults.renderNameEnabled, () -> config.renderNameEnabled, newVal -> config.renderNameEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Animations
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.animations"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.animationsEnabled, () -> config.animationsEnabled, newVal -> config.animationsEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations.main"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.animationsMain, () -> config.animationsMain, newVal -> config.animationsMain = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations.off"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.animationsOff, () -> config.animationsOff, newVal -> config.animationsOff = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.animations.slowAnim"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(defaults.slowAnimations, () -> config.slowAnimations, newVal -> config.slowAnimations = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.render.animations.slowAnim"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.animations.desc")))
                                        .binding(12, () -> config.slowValue, newVal -> config.slowValue = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 50)
                                                .step(1))
                                        .build())
                                .build())
                        // View Model
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.viewmodel"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.items"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(defaults.affectItems, () -> config.affectItems, newVal -> config.affectItems = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.scale"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(1f, () -> config.scale, newVal -> config.scale = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0.1f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.scaleoff"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(1f, () -> config.scaleoff, newVal -> config.scaleoff = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0.1f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.posX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posX, newVal -> config.posX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.posY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posY, newVal -> config.posY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.posZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posZ, newVal -> config.posZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotMainX, newVal -> config.rotMainX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotMainY, newVal -> config.rotMainY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotMainZ, newVal -> config.rotMainZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotOffX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotOffX, newVal -> config.rotOffX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotOffY, newVal -> config.rotOffY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.rotMainZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotOffZ, newVal -> config.rotOffZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(defaults.affectArm, () -> config.affectArm, newVal -> config.affectArm = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.posX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posArmX, newVal -> config.posArmX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.posY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posArmY, newVal -> config.posArmY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.posZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.posArmZ, newVal -> config.posArmZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-3f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.rotX"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotArmX, newVal -> config.rotArmX = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.rotY"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotArmY, newVal -> config.rotArmY = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.viewmodel.arm.rotZ"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.viewmodel.desc")))
                                        .binding(0f, () -> config.rotArmZ, newVal -> config.rotArmZ = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-180f, 180f)
                                                .step(0.01f))
                                        .build())
                                .build())
                        // Low Fire
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.lowfire"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.lowfire"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.lowfire.desc")))
                                        .binding(defaults.lowFireEnabled, () -> config.lowFireEnabled, newVal -> config.lowFireEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Low Shield
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.lowshield"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.lowfire"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.lowshield.desc")))
                                        .binding(defaults.lowShield, () -> config.lowShield, newVal -> config.lowShield = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.render.lowshield.value"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.lowshield.desc")))
                                        .binding(-0.3f, () -> config.lowShieldValue, newVal -> config.lowShieldValue = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(-0.5f, 3f)
                                                .step(0.01f))
                                        .build())
                                .build())
                        // Brush Client Menu
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.bcm"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.bcm"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.bcm.desc")))
                                        .binding(defaults.bcm, () -> config.bcm, newVal -> config.bcm = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .flag(OptionFlag.GAME_RESTART)
                                        .build())
                                .build())
                        // No totem pop
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.nototempart"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.nototempart"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.nototempart.desc")))
                                        .binding(defaults.nototempart, () -> config.nototempart, newVal -> config.nototempart = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Bad model
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.badmodel"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.badmodel"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.badmodel.desc")))
                                        .binding(defaults.badmodel, () -> config.badmodel, newVal -> config.badmodel = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .flag(OptionFlag.GAME_RESTART)
                                        .build())
                                .build())
                        // Sky Color
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.sky"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.sky"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.sky.desc")))
                                        .binding(defaults.sky, () -> config.sky, newVal -> config.sky = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.render.sky.color"))
                                        .binding(defaults.skyColor, () -> config.skyColor, value -> config.skyColor = value)
                                        .customController(opt -> new ColorController(opt, false))
                                        .build())
                                .build())
                        // Fog Color
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.fog"))
                                 .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.fog"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.fog.desc")))
                                        .binding(defaults.fog, () -> config.fog, newVal -> config.fog = newVal)
                                         .controller(opt -> BooleanControllerBuilder.create(opt)
                                                 .onOffFormatter()
                                                 .coloured(true))
                                         .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.render.fog.color"))
                                        .binding(defaults.fogColor, () -> config.fogColor, value -> config.fogColor = value)
                                        .customController(opt -> new ColorController(opt, false))
                                        .build())
                                .build())

                        // Overlays
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.render.overlays"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.overlays"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.overlays.desc")))
                                        .binding(defaults.overlays, () -> config.overlays, newVal -> config.overlays = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.overlays.portal"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.overlays.desc")))
                                        .binding(defaults.portalOverlay, () -> config.portalOverlay, newVal -> config.portalOverlay = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.overlays.gui"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.overlays.desc")))
                                        .binding(defaults.guiOverlay, () -> config.guiOverlay, newVal -> config.guiOverlay = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.overlays.glint"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.overlays.desc")))
                                        .binding(defaults.glintOverlay, () -> config.glintOverlay, newVal -> config.glintOverlay = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.overlays.pumpkin"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.overlays.desc")))
                                        .binding(defaults.pumpkinOverlay, () -> config.pumpkinOverlay, newVal -> config.pumpkinOverlay = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.overlays.bossbar"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.overlays.desc")))
                                        .binding(defaults.bossbarOverlay, () -> config.bossbarOverlay, newVal -> config.bossbarOverlay = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.render.overlays.scoreboard"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.render.overlays.desc")))
                                        .binding(defaults.scoreboardOverlay, () -> config.scoreboardOverlay, newVal -> config.scoreboardOverlay = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        .build())


                // MISC CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.misc"))
                        // Anti RP
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.antirp"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.antirp"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.antirp.desc")))
                                        .binding(defaults.antiRP, () -> config.antiRP, newVal -> config.antiRP = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Hide Screens
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.hidescreens"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.hidescreens"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hidescreens.desc")))
                                        .binding(defaults.hideScreens, () -> config.hideScreens, newVal -> config.hideScreens = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Hide Name
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.hidename"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.hidename"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hidename.desc")))
                                        .binding(defaults.hideName, () -> config.hideName, newVal -> config.hideName = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(String.class)
                                        .name(Text.translatable("brushclient.misc.hidename.fake"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hidename.desc")))
                                        .binding(defaults.fakeName, () -> config.fakeName, newVal -> config.fakeName = newVal)
                                        .controller(StringControllerBuilder::create)
                                        .build())
                                .build())
                        // Fake Tier
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.faketier"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.faketier"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.faketier.desc")))
                                        .binding(defaults.fakeTier, () -> config.fakeTier, newVal -> config.fakeTier = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(String.class)
                                        .name(Text.translatable("brushclient.misc.faketier.tier"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.faketier.desc")))
                                        .binding(defaults.tier, () -> config.tier, newVal -> config.tier = newVal)
                                        .controller(StringControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.misc.faketier.color"))
                                        .binding(defaults.tierColor, () -> config.tierColor, value -> config.tierColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .build())
                        // HP Indicator
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.hp"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.hp"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.hp.desc")))
                                        .binding(defaults.hp, () -> config.hp, newVal -> config.hp = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.misc.hp.color"))
                                        .binding(defaults.hpColor, () -> config.hpColor, value -> config.hpColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .build())
                        // Sound When Hit
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.swh"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.swh"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.swh.desc")))
                                        .binding(defaults.swh, () -> config.swh, newVal -> config.swh = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // Ping Me
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.pingme"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.pingme"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.pingme.desc")))
                                        .binding(defaults.pingMe, () -> config.pingMe, newVal -> config.pingMe = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.misc.pingme.color"))
                                        .binding(defaults.pingMeColor, () -> config.pingMeColor, value -> config.pingMeColor = value)
                                        .customController(opt -> new ColorController(opt, false))
                                        .build())
                                .build())
                        // Auto Sprint
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.sprint"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.sprint"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.sprint.desc")))
                                        .binding(defaults.sprint, () -> config.sprint, newVal -> config.sprint = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // No Weather
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.noweather"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.noweather"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.noweather.desc")))
                                        .binding(defaults.noWeather, () -> config.noWeather, newVal -> config.noWeather = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // No Explosions
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.noexplosions"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.noexplosions"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.noexplosions.desc")))
                                        .binding(defaults.noExplosions, () -> config.noExplosions, newVal -> config.noExplosions = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // No Break Particles
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.misc.nobreakp"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.misc.nobreakp"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.misc.nobreakp.desc")))
                                        .binding(defaults.noBreakPart, () -> config.noBreakPart, newVal -> config.noBreakPart = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        .build())

                // HUD CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.hud"))
                        // Effect Time
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.effecttime"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.effecttime"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.effecttime.desc")))
                                        .binding(defaults.effectTimeEnabled, () -> config.effectTimeEnabled, newVal -> config.effectTimeEnabled = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .build())
                        // DISCORD RPS
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.rpc"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.rpc"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.rpc.desc")))
                                        .binding(defaults.rpc, () -> config.rpc, newVal -> config.rpc = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.rpc.version"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.rpc.desc")))
                                        .binding(defaults.rpcVersion, () -> config.rpcVersion, newVal -> config.rpcVersion = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.rpc.multiplayer"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.rpc.desc")))
                                        .binding(defaults.rpcMult, () -> config.rpcMult, newVal -> config.rpcMult = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .build())
                        // FPS
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.fps"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.fps"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.fps.desc")))
                                        .binding(defaults.fps, () -> config.fps, newVal -> config.fps = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.fps.textshadow"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.fps.desc")))
                                        .binding(defaults.textShadow, () -> config.textShadow, newVal -> config.textShadow = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.hud.fps.color"))
                                        .binding(defaults.fpsColor, () -> config.fpsColor, value -> config.fpsColor = value)
                                        .customController(opt -> new ColorController(opt, false))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.hud.fps.textsize"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.fps.desc")))
                                        .binding(1f, () -> config.textSize, newVal -> config.textSize = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.fps.top"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.fps.desc")))
                                        .binding(4, () -> config.top, newVal -> config.top = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1080)
                                                .step(1))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.fps.left"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.fps.desc")))
                                        .binding(4, () -> config.left, newVal -> config.left = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1920)
                                                .step(1))
                                        .build())
                                .option(Option.createBuilder(String.class)
                                        .name(Text.translatable("brushclient.hud.fps.string"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.fps.desc")))
                                        .binding(defaults.nameFps, () -> config.nameFps, newVal -> config.nameFps = newVal)
                                        .controller(StringControllerBuilder::create)
                                        .build())
                                .build())
                        // PING
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.ping"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.ping"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.ping.desc")))
                                        .binding(defaults.ping, () -> config.ping, newVal -> config.ping = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.ping.textshadow"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.ping.desc")))
                                        .binding(defaults.pingShadow, () -> config.pingShadow, newVal -> config.pingShadow = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.hud.ping.color"))
                                        .binding(defaults.pingColor, () -> config.pingColor, value -> config.pingColor = value)
                                        .customController(opt -> new ColorController(opt, false))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.hud.ping.textsize"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.ping.desc")))
                                        .binding(1f, () -> config.pingSize, newVal -> config.pingSize = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.ping.top"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.ping.desc")))
                                        .binding(4, () -> config.topPing, newVal -> config.topPing = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1080)
                                                .step(1))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.ping.left"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.ping.desc")))
                                        .binding(4, () -> config.leftPing, newVal -> config.leftPing = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1920)
                                                .step(1))
                                        .build())
                                .option(Option.createBuilder(String.class)
                                        .name(Text.translatable("brushclient.hud.ping.string"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.ping.desc")))
                                        .binding(defaults.name, () -> config.name, newVal -> config.name = newVal)
                                        .controller(StringControllerBuilder::create)
                                        .build())
                                .build())
                        // Coordinates
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.coords"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.coords"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.coords.desc")))
                                        .binding(defaults.coords, () -> config.coords, newVal -> config.coords = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.coords.textshadow"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.coords.desc")))
                                        .binding(defaults.coordsShadow, () -> config.coordsShadow, newVal -> config.coordsShadow = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.hud.coords.color"))
                                        .binding(defaults.coordsColor, () -> config.coordsColor, value -> config.coordsColor = value)
                                        .customController(opt -> new ColorController(opt, false))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.hud.coords.textsize"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.ping.desc")))
                                        .binding(1f, () -> config.coordsSize, newVal -> config.coordsSize = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.coords.top"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.coords.desc")))
                                        .binding(4, () -> config.topCoords, newVal -> config.topCoords = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1080)
                                                .step(1))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.coords.left"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.coords.desc")))
                                        .binding(4, () -> config.leftCoords, newVal -> config.leftCoords = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1920)
                                                .step(1))
                                        .build())
                                .build())
                        // Server IP
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.hud.serverip"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.serverip"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.serverip.desc")))
                                        .binding(defaults.ip, () -> config.ip, newVal -> config.ip = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.hud.serverip.textshadow"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.serverip.desc")))
                                        .binding(defaults.ipShadow, () -> config.ipShadow, newVal -> config.ipShadow = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.hud.serverip.color"))
                                        .binding(defaults.ipColor, () -> config.ipColor, value -> config.ipColor = value)
                                        .customController(opt -> new ColorController(opt, false))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.hud.serverip.textsize"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.serverip.desc")))
                                        .binding(1f, () -> config.ipSize, newVal -> config.ipSize = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0f, 3f)
                                                .step(0.01f))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.serverip.top"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.serverip.desc")))
                                        .binding(4, () -> config.topIp, newVal -> config.topIp = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1080)
                                                .step(1))
                                        .build())
                                .option(Option.createBuilder(int.class)
                                        .name(Text.translatable("brushclient.hud.serverip.left"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.hud.serverip.desc")))
                                        .binding(4, () -> config.leftIp, newVal -> config.leftIp = newVal)
                                        .controller(opt -> IntegerSliderControllerBuilder.create(opt)
                                                .range(0, 1920)
                                                .step(1))
                                        .build())
                                .build())
                        .build())

                // COMBAT CATEGORY

                .category(ConfigCategory.createBuilder()
                        .name(Text.translatable("brushclient.combat"))
                        // Hit Color
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.combat.hitcolor"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.hitcolor"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.hitcolor.desc")))
                                        .binding(defaults.hitcolor, () -> config.hitcolor, newVal -> config.hitcolor = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.combat.hitcolor.color"))
                                        .binding(defaults.colorHit, () -> config.colorHit, value -> config.colorHit = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .build())
                        // Pearl
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.combat.pearl"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.pearl"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.pearl.desc")))
                                        .binding(defaults.pearl, () -> config.pearl, newVal -> config.pearl = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.pearl.sound"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.pearl.desc")))
                                        .binding(defaults.pearlSound, () -> config.pearlSound, newVal -> config.pearlSound = newVal)
                                        .controller(TickBoxControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(String.class)
                                        .name(Text.translatable("brushclient.combat.pearl.sound"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.pearl.desc")))
                                        .binding(defaults.pearlSoundId, () -> config.pearlSoundId, newVal -> config.pearlSoundId = newVal)
                                        .controller(StringControllerBuilder::create)
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.combat.pearl.size"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.pearl.desc")))
                                        .binding(1f, () -> config.pearlSize, newVal -> config.pearlSize = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0f, 5f)
                                                .step(0.01f))
                                        .build())
                                .build())
                        // Block Overlay
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.combat.blockoverlay"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.blockoverlay"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.blockoverlay.desc")))
                                        .binding(defaults.bo, () -> config.bo, newVal -> config.bo = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.combat.blockoverlay.color"))
                                        .binding(defaults.boColor, () -> config.boColor, value -> config.boColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .build())
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.combat.totempop"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.totempop"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.totempop.desc")))
                                        .binding(defaults.totemPop, () -> config.totemPop, newVal -> config.totemPop = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.createBuilder(float.class)
                                        .name(Text.translatable("brushclient.combat.totempop.value"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.totempop.desc")))
                                        .binding(0f, () -> config.totemPopValue, newVal -> config.totemPopValue = newVal)
                                        .controller(opt -> FloatSliderControllerBuilder.create(opt)
                                                .valueFormatter(value -> Text.literal(FORMAT.format(value)))
                                                .range(0f, 5f)
                                                .step(0.01f))
                                        .build())
                                .build())
                        // No Totem
                        .group(OptionGroup.createBuilder()
                                .name(Text.translatable("brushclient.combat.nototem"))
                                .option(Option.createBuilder(boolean.class)
                                        .name(Text.translatable("brushclient.combat.nototem"))
                                        .description(OptionDescription.of(Text.translatable("brushclient.combat.nototem.desc")))
                                        .binding(defaults.nototem, () -> config.nototem, newVal -> config.nototem = newVal)
                                        .controller(opt -> BooleanControllerBuilder.create(opt)
                                                .onOffFormatter()
                                                .coloured(true))
                                        .build())
                                .option(Option.<Color>createBuilder()
                                        .name(Text.translatable("brushclient.combat.nototem.color"))
                                        .binding(defaults.nototemColor, () -> config.nototemColor, value -> config.nototemColor = value)
                                        .customController(opt -> new ColorController(opt, true))
                                        .build())
                                .build())
                        .build())
        )).generateScreen(parent);
    }
}